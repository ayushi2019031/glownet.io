---
layout: post
title: "Building autonomous AI Agents with Azure"
permalink: /ai-agents-on-azure/
description: ""
---

* Table of Contents
{:toc}

---
 # What are agents? 

 Agents = LLM Model + Action + Knowledge Base

This is the short and the most precise definition of AI Agents. They use an LLM model for understanding the natural language and have the ability to perform tasks (Action) based on the knowledge base. 

For example: 

An agent that can fix issues in SAP system of a business - based on the tech support's description, SAP's public documentation and internal company docs. The agent shares the suggestion for remedial action, and asks the tech support for permission to perform the same, before proceeding with it. 
Additionally, as a part of the company's internal audit process, all agentic AI systems have to go through automated evaluations like tool call accuracy, coherence, relevance, safety and protection against jailbreak attacks. This ensures that the agents are safe to use for the employees and can be relied on to a certain extent for increasing worker productivity and reducing downtimes. 

# How to build AI Agents on Azure?

Azure has multiple platforms for building AI agents. Starting from no-code platform of Copilot Studio to highly developer centric AI foundry, anyone can start building. All you need is an idea and the drive to build. 

For business users with little or no software development experience, Copilot Studio agent builder in Microsoft 365 Copilot Chat provides a way to create simple declarative agents that automate everyday tasks. This approach can empower users across an organization to benefit from AI agents with minimal impact on IT.
If business users have sufficient technical skills to build low-code solutions using Microsoft Power Platform technologies, Copilot Studio enables them to combine those skills with their business domain knowledge and build agent solutions that extend the capabilities of Microsoft 365 Copilot or add agentic functionality to common channels like Microsoft Teams, Slack, or Messenger.
When an organization needs more complex extensions to Microsoft 365 Copilot capabilities, professional developers can use the Microsoft 365 Agents SDK to build agents that target the same channels as Copilot Studio.
To develop agentic solutions that use Azure back-end services with a wide choice of models, custom storage and search services, and integration with Azure AI services, professional developers should use Foundry Agent Service.
Start with Foundry Agent Service to develop single, standalone agents. When you need to build multi-agent solutions, use Semantic Kernel to orchestrate the agents in your solution.


# Building agents on AI foundry 

1. Creating model based deployment for the agent

- via portal 
- via python SDK 
2. Concept of threads and runs
- via portal 
- via python SDK 
3. Addition of tools to the agent - Logic app, open api specification
- via portal 
- via python SDK 
4. Varying parameters like temperature
- via portal 
- via python SDK 
5. Addition of knowledge base to the agent 
- via portal 
- via python SDK 

# Evaluation of your agent (with Python SDK)

## How would the evaluation pipeline look like on a scale? 

Simulate prompts - fetch the agent id - and then ask the agent to run on the those prompts - simulate multi-turn conversations. 

How does the simulation work? 
// give the python code and example of prompts

How does the evaluation work? 
// give the puthon code and example of evaluation results

Where is it vsible in azure foundry? 
// Show the azure ml resource and then the ss of the az foundry. 

## How about evaluation of existing conversations? 
Can be done on the user's end for their auditing. 


# Conclusion
And with this blog you learnt ....